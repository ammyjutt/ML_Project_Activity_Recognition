{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8c6e483e-22d1-431d-96e1-e92f44db7678",
   "metadata": {
    "id": "8c6e483e-22d1-431d-96e1-e92f44db7678"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import skew, kurtosis, entropy\n",
    "from scipy.signal import welch\n",
    "from scipy.linalg import norm\n",
    "from statsmodels.tsa.stattools import acf\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, precision_recall_fscore_support, precision_recall_curve, average_precision_score,classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f5a6947-2612-4910-9bf9-9273c185ebc7",
   "metadata": {
    "id": "0f5a6947-2612-4910-9bf9-9273c185ebc7"
   },
   "source": [
    "### 1.1 Reading of training data from numpy files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "r7dZnPLI22ER",
   "metadata": {
    "id": "r7dZnPLI22ER"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2284, 268, 3)\n",
      "(2284, 268, 3)\n",
      "(2284,)\n"
     ]
    }
   ],
   "source": [
    "trainMSAccelerometer = \"trainMSAccelerometer.npy\";\n",
    "trainMSGyroscope = \"trainMSGyroscope.npy\";\n",
    "trainLabels = \"trainLabels.npy\";\n",
    "\n",
    "tr_msAcc = np.load(trainMSAccelerometer)\n",
    "tr_msGyr = np.load(trainMSGyroscope)\n",
    "tr_labels = np.load(trainLabels)\n",
    "\n",
    "print(tr_msAcc.shape)\n",
    "print(tr_msGyr.shape)\n",
    "print(tr_labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "57352104-e3f2-4723-a3bc-f468d6fa6ded",
   "metadata": {
    "id": "57352104-e3f2-4723-a3bc-f468d6fa6ded"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(184, 268, 3)\n",
      "(184, 268, 3)\n",
      "(184,)\n"
     ]
    }
   ],
   "source": [
    "DRINK = 10\n",
    "TOUCH_SMARTPHONE_SCREEN = 49\n",
    "RUB_HANDS = 36\n",
    "CLOSE_TAP_WATER = 25\n",
    "SCOOP_AND_PUT = 37\n",
    "\n",
    "tr_labels_DRINK_idx = tr_labels == DRINK\n",
    "tr_labels_TOUCH_SMARTPHONE_SCREEN_idx = tr_labels == TOUCH_SMARTPHONE_SCREEN\n",
    "tr_labels_RUB_HANDS_idx = tr_labels == RUB_HANDS\n",
    "tr_labels_CLOSE_TAP_WATER_idx = tr_labels == CLOSE_TAP_WATER\n",
    "tr_labels_SCOOP_AND_PUT_idx = tr_labels == SCOOP_AND_PUT\n",
    "\n",
    "\n",
    "tr_msAcc_DRINK = tr_msAcc[tr_labels_DRINK_idx]\n",
    "tr_msGyr_DRINK = tr_msGyr[tr_labels_DRINK_idx]\n",
    "\n",
    "tr_msAcc_TOUCH_SMARTPHONE_SCREEN = tr_msAcc[tr_labels_TOUCH_SMARTPHONE_SCREEN_idx]\n",
    "tr_msGyr_TOUCH_SMARTPHONE_SCREEN = tr_msGyr[tr_labels_TOUCH_SMARTPHONE_SCREEN_idx]\n",
    "\n",
    "tr_msAcc_RUB_HANDS = tr_msAcc[tr_labels_RUB_HANDS_idx]\n",
    "tr_msGyr_RUB_HANDS = tr_msGyr[tr_labels_RUB_HANDS_idx]\n",
    "\n",
    "tr_msAcc_CLOSE_TAP_WATER = tr_msAcc[tr_labels_CLOSE_TAP_WATER_idx]\n",
    "tr_msGyr_CLOSE_TAP_WATER = tr_msGyr[tr_labels_CLOSE_TAP_WATER_idx]\n",
    "\n",
    "tr_msAcc_SCOOP_AND_PUT = tr_msAcc[tr_labels_SCOOP_AND_PUT_idx]\n",
    "tr_msGyr_SCOOP_AND_PUT = tr_msGyr[tr_labels_SCOOP_AND_PUT_idx]\n",
    "\n",
    "tr_labels_DRINK = tr_labels[tr_labels_DRINK_idx]\n",
    "tr_labels_TOUCH_SMARTPHONE_SCREEN = tr_labels[tr_labels_TOUCH_SMARTPHONE_SCREEN_idx]\n",
    "tr_labels_RUB_HANDS = tr_labels[tr_labels_RUB_HANDS_idx]\n",
    "tr_labels_CLOSE_TAP_WATER = tr_labels[tr_labels_CLOSE_TAP_WATER_idx]\n",
    "tr_labels_SCOOP_AND_PUT = tr_labels[tr_labels_SCOOP_AND_PUT_idx]\n",
    "\n",
    "tr_msAcc_five_Activities = np.concatenate((tr_msAcc_DRINK, tr_msAcc_TOUCH_SMARTPHONE_SCREEN, tr_msAcc_RUB_HANDS, tr_msAcc_CLOSE_TAP_WATER, tr_msAcc_SCOOP_AND_PUT))\n",
    "tr_msGyr_five_Activities = np.concatenate((tr_msGyr_DRINK, tr_msGyr_TOUCH_SMARTPHONE_SCREEN, tr_msGyr_RUB_HANDS, tr_msGyr_CLOSE_TAP_WATER, tr_msGyr_SCOOP_AND_PUT))\n",
    "tr_labels_five_Activities = np.concatenate((tr_labels_DRINK, tr_labels_TOUCH_SMARTPHONE_SCREEN, tr_labels_RUB_HANDS, tr_labels_CLOSE_TAP_WATER, tr_labels_SCOOP_AND_PUT))\n",
    "\n",
    "print(tr_msAcc_five_Activities.shape)\n",
    "print(tr_msGyr_five_Activities.shape)\n",
    "print(tr_labels_five_Activities.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dd811d8-ee87-4bc8-89db-a0156e6d785e",
   "metadata": {},
   "source": [
    "### 1.2 Reading of testing data from numpy files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "xGZMxbMZ5xiO",
   "metadata": {
    "id": "xGZMxbMZ5xiO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2288, 268, 3)\n",
      "(2288, 268, 3)\n",
      "(2288,)\n"
     ]
    }
   ],
   "source": [
    "testMSAccelerometer = \"testMSAccelerometer.npy\";\n",
    "testMSGyroscope = \"testMSGyroscope.npy\";\n",
    "testLabels = \"testLabels.npy\";\n",
    "\n",
    "ts_msAcc = np.load(testMSAccelerometer)\n",
    "ts_msGyr = np.load(testMSGyroscope)\n",
    "ts_labels = np.load(testLabels)\n",
    "\n",
    "print(ts_msAcc.shape)\n",
    "print(ts_msGyr.shape)\n",
    "print(ts_labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "cbb799ac-c975-4470-befa-00a07c18296a",
   "metadata": {
    "id": "cbb799ac-c975-4470-befa-00a07c18296a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(193, 268, 3)\n",
      "(193, 268, 3)\n",
      "(193,)\n"
     ]
    }
   ],
   "source": [
    "DRINK = 10\n",
    "TOUCH_SMARTPHONE_SCREEN = 49\n",
    "RUB_HANDS = 36\n",
    "CLOSE_TAP_WATER = 25\n",
    "SCOOP_AND_PUT = 37\n",
    "\n",
    "ts_labels_DRINK_idx = ts_labels == DRINK\n",
    "ts_labels_TOUCH_SMARTPHONE_SCREEN_idx = ts_labels == TOUCH_SMARTPHONE_SCREEN\n",
    "ts_labels_RUB_HANDS_idx = ts_labels == RUB_HANDS\n",
    "ts_labels_CLOSE_TAP_WATER_idx = ts_labels == CLOSE_TAP_WATER\n",
    "ts_labels_SCOOP_AND_PUT_idx = ts_labels == SCOOP_AND_PUT\n",
    "\n",
    "\n",
    "ts_msAcc_DRINK = ts_msAcc[ts_labels_DRINK_idx]\n",
    "ts_msGyr_DRINK = ts_msGyr[ts_labels_DRINK_idx]\n",
    "\n",
    "ts_msAcc_TOUCH_SMARTPHONE_SCREEN = ts_msAcc[ts_labels_TOUCH_SMARTPHONE_SCREEN_idx]\n",
    "ts_msGyr_TOUCH_SMARTPHONE_SCREEN = ts_msGyr[ts_labels_TOUCH_SMARTPHONE_SCREEN_idx]\n",
    "\n",
    "ts_msAcc_RUB_HANDS = ts_msAcc[ts_labels_RUB_HANDS_idx]\n",
    "ts_msGyr_RUB_HANDS = ts_msGyr[ts_labels_RUB_HANDS_idx]\n",
    "\n",
    "ts_msAcc_CLOSE_TAP_WATER = ts_msAcc[ts_labels_CLOSE_TAP_WATER_idx]\n",
    "ts_msGyr_CLOSE_TAP_WATER = ts_msGyr[ts_labels_CLOSE_TAP_WATER_idx]\n",
    "\n",
    "ts_msAcc_SCOOP_AND_PUT = ts_msAcc[ts_labels_SCOOP_AND_PUT_idx]\n",
    "ts_msGyr_SCOOP_AND_PUT = ts_msGyr[ts_labels_SCOOP_AND_PUT_idx]\n",
    "\n",
    "ts_labels_DRINK = ts_labels[ts_labels_DRINK_idx]\n",
    "ts_labels_TOUCH_SMARTPHONE_SCREEN = ts_labels[ts_labels_TOUCH_SMARTPHONE_SCREEN_idx]\n",
    "ts_labels_RUB_HANDS = ts_labels[ts_labels_RUB_HANDS_idx]\n",
    "ts_labels_CLOSE_TAP_WATER = ts_labels[ts_labels_CLOSE_TAP_WATER_idx]\n",
    "ts_labels_SCOOP_AND_PUT = ts_labels[ts_labels_SCOOP_AND_PUT_idx]\n",
    "\n",
    "ts_msAcc_five_Activities = np.concatenate((ts_msAcc_DRINK, ts_msAcc_TOUCH_SMARTPHONE_SCREEN, ts_msAcc_RUB_HANDS, ts_msAcc_CLOSE_TAP_WATER, ts_msAcc_SCOOP_AND_PUT))\n",
    "ts_msGyr_five_Activities = np.concatenate((ts_msGyr_DRINK, ts_msGyr_TOUCH_SMARTPHONE_SCREEN, ts_msGyr_RUB_HANDS, ts_msGyr_CLOSE_TAP_WATER, ts_msGyr_SCOOP_AND_PUT))\n",
    "ts_labels_five_Activities = np.concatenate((ts_labels_DRINK, ts_labels_TOUCH_SMARTPHONE_SCREEN, ts_labels_RUB_HANDS, ts_labels_CLOSE_TAP_WATER, ts_labels_SCOOP_AND_PUT))\n",
    "\n",
    "print(ts_msAcc_five_Activities.shape)\n",
    "print(ts_msGyr_five_Activities.shape)\n",
    "print(ts_labels_five_Activities.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32e96004-d5c2-47c8-9865-6ee35c7910e6",
   "metadata": {},
   "source": [
    "### 4. Extracting and Learning meaningful features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f7d51e42-8f35-4731-9850-c843cac3a506",
   "metadata": {
    "id": "f7d51e42-8f35-4731-9850-c843cac3a506"
   },
   "outputs": [],
   "source": [
    "def compute_features(data, tr_five_Activities):\n",
    "    for i in range(tr_five_Activities.shape[0]):\n",
    "\n",
    "        # Initialize an empty list to hold statistics for this sample\n",
    "        stats = []\n",
    "\n",
    "        # Maximum\n",
    "        stats.append(np.max(tr_five_Activities[i], axis = 0))\n",
    "\n",
    "        # Minimum\n",
    "        stats.append(np.min(tr_five_Activities[i], axis = 0))\n",
    "\n",
    "        # First-order mean\n",
    "        mean_val = np.mean(tr_five_Activities[i], axis = 0)\n",
    "        stats.append(mean_val)\n",
    "\n",
    "        # Standard Deviation\n",
    "        stats.append(np.std(tr_five_Activities[i], axis = 0))\n",
    "\n",
    "        # Percentile 50\n",
    "        stats.append(np.percentile(tr_five_Activities[i], 50, axis = 0))\n",
    "\n",
    "        # Percentile 80\n",
    "        stats.append(np.percentile(tr_five_Activities[i], 80, axis = 0))\n",
    "\n",
    "        # Norm of the first-order mean\n",
    "        stats.append(np.full(mean_val.shape, norm(mean_val)))\n",
    "\n",
    "        # Average (same as mean)\n",
    "        stats.append(mean_val)\n",
    "\n",
    "        # Interquartile range\n",
    "        stats.append(np.percentile(tr_five_Activities[i], 75, axis = 0) - np.percentile(tr_five_Activities[i], 25, axis = 0))\n",
    "\n",
    "        # Second-order mean\n",
    "        squared_mean = np.mean(np.square(tr_five_Activities[i]), axis = 0)\n",
    "        stats.append(squared_mean)\n",
    "\n",
    "        # Skewness\n",
    "        stats.append(skew(tr_five_Activities[i], axis = 0))\n",
    "\n",
    "        # Norm of the second-order mean\n",
    "        stats.append(np.full(squared_mean.shape, norm(squared_mean)))\n",
    "\n",
    "        # Zero-crossing\n",
    "        zero_crossings = np.sum(np.diff(np.sign(tr_five_Activities[i]), axis = 0) != 0, axis = 0)\n",
    "        stats.append(zero_crossings)\n",
    "\n",
    "        # Kurtosis\n",
    "        stats.append(kurtosis(tr_five_Activities[i], axis = 0))\n",
    "\n",
    "        # Spectral energy\n",
    "        frequencies, power_spectral_density = welch(tr_five_Activities[i], axis = 0)\n",
    "        spectral_energy = np.sum(power_spectral_density, axis = 0)\n",
    "        stats.append(spectral_energy)\n",
    "\n",
    "        # Percentile 20\n",
    "        stats.append(np.percentile(tr_five_Activities[i], 20, axis = 0))\n",
    "\n",
    "        # Auto-correlation (assuming lag 1)\n",
    "        autocorr = np.array([acf(tr_five_Activities[i][:, j], nlags = 1, fft = True)[1] for j in range(tr_five_Activities[i].shape[1])])\n",
    "        stats.append(autocorr)\n",
    "\n",
    "        # Spectral entropy\n",
    "        power_spectral_density /= np.sum(power_spectral_density, axis = 0, keepdims = True)\n",
    "        spectral_entropy = entropy(power_spectral_density, axis = 0)\n",
    "        stats.append(spectral_entropy)\n",
    "\n",
    "        # Convert list of arrays to a 2D array of shape (18, 3)\n",
    "        stats_array = np.array(stats)\n",
    "\n",
    "        # Store in pre-allocated data array\n",
    "        data[i] = stats_array\n",
    "\n",
    "    # Now `data` contains the computed statistics for each sample\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaeecc60-0338-4f4e-a588-1558ae4b320c",
   "metadata": {
    "id": "eaeecc60-0338-4f4e-a588-1558ae4b320c"
   },
   "source": [
    "### 2.1 Storing training data into appropriate data structures\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "58a284c3-f95a-46f7-915f-70bd3565b637",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "58a284c3-f95a-46f7-915f-70bd3565b637",
    "outputId": "08fa6079-2ac0-45a4-ea13-18203a38b51c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(184, 18, 3)\n",
      "(184, 1, 54)\n"
     ]
    }
   ],
   "source": [
    "data = np.empty((tr_msAcc_five_Activities.shape[0], 18, 3))\n",
    "compute_features(data,tr_msAcc_five_Activities)\n",
    "print(data.shape)\n",
    "# reshape the data so that each row contain all features of the one example(x-axis,y-axis,z-axis)\n",
    "data = np.reshape(data,(tr_msAcc_five_Activities.shape[0],1,-1))\n",
    "print(data.shape)\n",
    "tr_msAcc_five_Activities1 = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6be92897-0a1e-441d-8ecf-6f30266cfc02",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6be92897-0a1e-441d-8ecf-6f30266cfc02",
    "outputId": "d55d91bb-804e-4f1b-9130-fe7982baf471"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(184, 1, 54)\n"
     ]
    }
   ],
   "source": [
    "data = np.empty((tr_msGyr_five_Activities.shape[0], 18, 3))\n",
    "compute_features(data,tr_msGyr_five_Activities)\n",
    "\n",
    "data = np.reshape(data,(tr_msGyr_five_Activities.shape[0],1,-1))\n",
    "print(data.shape)\n",
    "tr_msGyr_five_Activities1 = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "f5afc3ab-6ed3-446f-bcb4-b1759ec265d2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f5afc3ab-6ed3-446f-bcb4-b1759ec265d2",
    "outputId": "d3478c2c-1500-4c8b-b07d-2dec9da94065"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(184, 1, 108)\n"
     ]
    }
   ],
   "source": [
    "train_data = np.concatenate((tr_msAcc_five_Activities1, tr_msGyr_five_Activities1), axis=2)\n",
    "train_labels = tr_labels_five_Activities\n",
    "print(train_data.shape)\n",
    "\n",
    "train_data = np.squeeze(train_data, axis=1)\n",
    "train_labels = train_labels[:, np.newaxis]\n",
    "\n",
    "# Original labels    new lables\n",
    "# DRINK = 10  ---> 0\n",
    "# TOUCH_SMARTPHONE_SCREEN = 49 --> 1\n",
    "# RUB_HANDS = 36  ---> 2\n",
    "# CLOSE_TAP_WATER = 25 --> 3\n",
    "# SCOOP_AND_PUT = 37 ---> 4\n",
    "\n",
    "\n",
    "for i in range(train_data.shape[0]):\n",
    "    if train_labels[i] == 10:\n",
    "        train_labels[i] = 0;\n",
    "    elif train_labels[i] == 49:\n",
    "        train_labels[i] = 1;\n",
    "    elif train_labels[i] == 36:\n",
    "        train_labels[i] = 2;\n",
    "    elif train_labels[i] == 25:\n",
    "        train_labels[i] = 3;\n",
    "    elif train_labels[i] == 37:\n",
    "        train_labels[i] = 4;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6463e16c-8d80-48f0-9582-b624c8622e20",
   "metadata": {
    "id": "6463e16c-8d80-48f0-9582-b624c8622e20"
   },
   "source": [
    "### 2.2 Storing Test Data into appropriate data structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "cd6bd008-5f33-46d6-b42b-a26df95bc55f",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cd6bd008-5f33-46d6-b42b-a26df95bc55f",
    "outputId": "15adfc7d-871a-4b39-c229-99389ea7618f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(193, 1, 54)\n"
     ]
    }
   ],
   "source": [
    "data = np.empty((ts_msAcc_five_Activities.shape[0], 18, 3))\n",
    "compute_features(data,ts_msAcc_five_Activities)\n",
    "# reshape the data so that each row contain all features of the one example(x-axis,y-axis,z-axis)\n",
    "data = np.reshape(data,(ts_msAcc_five_Activities.shape[0],1,-1))\n",
    "print(data.shape)\n",
    "ts_msAcc_five_Activities1 = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f17843a9-18a4-402b-8afb-234cfbc64571",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f17843a9-18a4-402b-8afb-234cfbc64571",
    "outputId": "49d00b69-ef96-4889-df72-65367b06542c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(193, 1, 54)\n"
     ]
    }
   ],
   "source": [
    "data = np.empty((ts_msGyr_five_Activities.shape[0], 18, 3))\n",
    "compute_features(data,ts_msGyr_five_Activities)\n",
    "data = np.reshape(data,(ts_msGyr_five_Activities.shape[0],1,-1))\n",
    "print(data.shape)\n",
    "ts_msGyr_five_Activities1 = data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "bf375661-3e6a-4f2f-813f-fb2b020507c6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bf375661-3e6a-4f2f-813f-fb2b020507c6",
    "outputId": "224b860b-3f19-41e0-8a32-6d196695630c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(193, 1, 108)\n"
     ]
    }
   ],
   "source": [
    "test_data = np.concatenate((ts_msAcc_five_Activities1, ts_msGyr_five_Activities1), axis = 2)\n",
    "test_labels = ts_labels_five_Activities\n",
    "print(test_data.shape)\n",
    "\n",
    "test_data = np.squeeze(test_data, axis = 1)\n",
    "test_labels = test_labels[:, np.newaxis]\n",
    "\n",
    "# Original labels    new lables\n",
    "# DRINK = 10  ---> 0\n",
    "# TOUCH_SMARTPHONE_SCREEN = 49 --> 1\n",
    "# RUB_HANDS = 36  ---> 2\n",
    "# CLOSE_TAP_WATER = 25 --> 3\n",
    "# SCOOP_AND_PUT = 37 ---> 4\n",
    "\n",
    "\n",
    "for i in range(test_data.shape[0]):\n",
    "    if test_labels[i] == 10:\n",
    "        test_labels[i] = 0;\n",
    "    elif test_labels[i] == 49:\n",
    "        test_labels[i] = 1;\n",
    "    elif test_labels[i] == 36:\n",
    "        test_labels[i] = 2;\n",
    "    elif test_labels[i] == 25:\n",
    "        test_labels[i] = 3;\n",
    "    elif test_labels[i] == 37:\n",
    "        test_labels[i] = 4;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca2e4676-8046-41d8-bbb9-154fb1928bf6",
   "metadata": {},
   "source": [
    "### 3. Applying preprocessing tecniques"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "dca7a070-b888-4a2f-8a2e-e67d90e81532",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizaion is one of the techniques of preprocessing of data\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "train_data = scaler.fit_transform(train_data)\n",
    "test_data = scaler.transform(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e9e5530-4763-40f2-ba6f-688f97fe47cb",
   "metadata": {
    "id": "3e9e5530-4763-40f2-ba6f-688f97fe47cb"
   },
   "source": [
    "### 6. Multiclass Classification(5 activities)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "837e317e-dcf9-41b7-b1bd-61e69cfe2e70",
   "metadata": {
    "id": "837e317e-dcf9-41b7-b1bd-61e69cfe2e70"
   },
   "outputs": [],
   "source": [
    "tf.random.set_seed(1234)\n",
    "model = Sequential(\n",
    "    [               \n",
    "        tf.keras.Input(shape=(108,)),\n",
    "        Dense(units=25,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.1)), \n",
    "        Dense(units=10,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.1)),  \n",
    "        # Dense(units=6,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.1)),\n",
    "        Dense(units=5,activation='linear')\n",
    "    ], name = \"my_model\" \n",
    ")\n",
    "model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
    "             metrics = ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "PH8DxxwAGCM1",
   "metadata": {
    "id": "PH8DxxwAGCM1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 6.7026 - accuracy: 0.2283\n",
      "Epoch 2/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 6.0977 - accuracy: 0.3261\n",
      "Epoch 3/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 5.6933 - accuracy: 0.3641\n",
      "Epoch 4/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 5.3494 - accuracy: 0.4402\n",
      "Epoch 5/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 5.0343 - accuracy: 0.5272\n",
      "Epoch 6/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 4.7403 - accuracy: 0.5489\n",
      "Epoch 7/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 4.4649 - accuracy: 0.5707\n",
      "Epoch 8/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 4.2072 - accuracy: 0.5870\n",
      "Epoch 9/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 3.9652 - accuracy: 0.5978\n",
      "Epoch 10/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 3.7360 - accuracy: 0.6196\n",
      "Epoch 11/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 3.5202 - accuracy: 0.6304\n",
      "Epoch 12/100\n",
      "6/6 [==============================] - 0s 7ms/step - loss: 3.3170 - accuracy: 0.6576\n",
      "Epoch 13/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 3.1269 - accuracy: 0.6739\n",
      "Epoch 14/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 2.9499 - accuracy: 0.6793\n",
      "Epoch 15/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 2.7849 - accuracy: 0.6630\n",
      "Epoch 16/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 2.6318 - accuracy: 0.6793\n",
      "Epoch 17/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 2.4877 - accuracy: 0.6685\n",
      "Epoch 18/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 2.3567 - accuracy: 0.6793\n",
      "Epoch 19/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 2.2345 - accuracy: 0.6848\n",
      "Epoch 20/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 2.1226 - accuracy: 0.7011\n",
      "Epoch 21/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 2.0188 - accuracy: 0.7011\n",
      "Epoch 22/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 1.9225 - accuracy: 0.7174\n",
      "Epoch 23/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 1.8339 - accuracy: 0.7120\n",
      "Epoch 24/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 1.7520 - accuracy: 0.7228\n",
      "Epoch 25/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.6794 - accuracy: 0.7609\n",
      "Epoch 26/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.6107 - accuracy: 0.7446\n",
      "Epoch 27/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 1.5495 - accuracy: 0.7663\n",
      "Epoch 28/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.4948 - accuracy: 0.7500\n",
      "Epoch 29/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 1.4449 - accuracy: 0.7663\n",
      "Epoch 30/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 1.3981 - accuracy: 0.7772\n",
      "Epoch 31/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.3544 - accuracy: 0.7989\n",
      "Epoch 32/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 1.3110 - accuracy: 0.7989\n",
      "Epoch 33/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.2732 - accuracy: 0.7989\n",
      "Epoch 34/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 1.2403 - accuracy: 0.8098\n",
      "Epoch 35/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.2108 - accuracy: 0.7935\n",
      "Epoch 36/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.1834 - accuracy: 0.8098\n",
      "Epoch 37/100\n",
      "6/6 [==============================] - 0s 14ms/step - loss: 1.1579 - accuracy: 0.8043\n",
      "Epoch 38/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 1.1355 - accuracy: 0.8207\n",
      "Epoch 39/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 1.1138 - accuracy: 0.8315\n",
      "Epoch 40/100\n",
      "6/6 [==============================] - 0s 7ms/step - loss: 1.0983 - accuracy: 0.8152\n",
      "Epoch 41/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 1.0794 - accuracy: 0.8261\n",
      "Epoch 42/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.0624 - accuracy: 0.8370\n",
      "Epoch 43/100\n",
      "6/6 [==============================] - 0s 7ms/step - loss: 1.0454 - accuracy: 0.8370\n",
      "Epoch 44/100\n",
      "6/6 [==============================] - 0s 1ms/step - loss: 1.0309 - accuracy: 0.8370\n",
      "Epoch 45/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 1.0179 - accuracy: 0.8315\n",
      "Epoch 46/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 1.0083 - accuracy: 0.8207\n",
      "Epoch 47/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.9939 - accuracy: 0.8478\n",
      "Epoch 48/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9828 - accuracy: 0.8478\n",
      "Epoch 49/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.9729 - accuracy: 0.8424\n",
      "Epoch 50/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 0.9636 - accuracy: 0.8315\n",
      "Epoch 51/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9543 - accuracy: 0.8370\n",
      "Epoch 52/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.9428 - accuracy: 0.8424\n",
      "Epoch 53/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 0.9351 - accuracy: 0.8641\n",
      "Epoch 54/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9279 - accuracy: 0.8478\n",
      "Epoch 55/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 0.9199 - accuracy: 0.8587\n",
      "Epoch 56/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.9113 - accuracy: 0.8696\n",
      "Epoch 57/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.9052 - accuracy: 0.8696\n",
      "Epoch 58/100\n",
      "6/6 [==============================] - 0s 903us/step - loss: 0.8999 - accuracy: 0.8533\n",
      "Epoch 59/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8912 - accuracy: 0.8641\n",
      "Epoch 60/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8846 - accuracy: 0.8587\n",
      "Epoch 61/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8783 - accuracy: 0.8587\n",
      "Epoch 62/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.8727 - accuracy: 0.8804\n",
      "Epoch 63/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.8684 - accuracy: 0.8750\n",
      "Epoch 64/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8584 - accuracy: 0.8696\n",
      "Epoch 65/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8531 - accuracy: 0.8859\n",
      "Epoch 66/100\n",
      "6/6 [==============================] - 0s 6ms/step - loss: 0.8482 - accuracy: 0.8587\n",
      "Epoch 67/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8463 - accuracy: 0.8859\n",
      "Epoch 68/100\n",
      "6/6 [==============================] - 0s 5ms/step - loss: 0.8395 - accuracy: 0.8859\n",
      "Epoch 69/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8328 - accuracy: 0.8804\n",
      "Epoch 70/100\n",
      "6/6 [==============================] - 0s 425us/step - loss: 0.8295 - accuracy: 0.8750\n",
      "Epoch 71/100\n",
      "6/6 [==============================] - 0s 0s/step - loss: 0.8260 - accuracy: 0.8696\n",
      "Epoch 72/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8196 - accuracy: 0.8913\n",
      "Epoch 73/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8131 - accuracy: 0.8859\n",
      "Epoch 74/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.8136 - accuracy: 0.8967\n",
      "Epoch 75/100\n",
      "6/6 [==============================] - 0s 0s/step - loss: 0.8053 - accuracy: 0.8859\n",
      "Epoch 76/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7986 - accuracy: 0.8750\n",
      "Epoch 77/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7989 - accuracy: 0.8859\n",
      "Epoch 78/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7917 - accuracy: 0.8859\n",
      "Epoch 79/100\n",
      "6/6 [==============================] - 0s 0s/step - loss: 0.7890 - accuracy: 0.8859\n",
      "Epoch 80/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7815 - accuracy: 0.8913\n",
      "Epoch 81/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7809 - accuracy: 0.8913\n",
      "Epoch 82/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7763 - accuracy: 0.8913\n",
      "Epoch 83/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7743 - accuracy: 0.9076\n",
      "Epoch 84/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7721 - accuracy: 0.8859\n",
      "Epoch 85/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7660 - accuracy: 0.9130\n",
      "Epoch 86/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7605 - accuracy: 0.8967\n",
      "Epoch 87/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7586 - accuracy: 0.9185\n",
      "Epoch 88/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7540 - accuracy: 0.9185\n",
      "Epoch 89/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7479 - accuracy: 0.9130\n",
      "Epoch 90/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7454 - accuracy: 0.9185\n",
      "Epoch 91/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7424 - accuracy: 0.9239\n",
      "Epoch 92/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.7400 - accuracy: 0.9076\n",
      "Epoch 93/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7352 - accuracy: 0.9239\n",
      "Epoch 94/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7328 - accuracy: 0.9076\n",
      "Epoch 95/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.7316 - accuracy: 0.9185\n",
      "Epoch 96/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7235 - accuracy: 0.9293\n",
      "Epoch 97/100\n",
      "6/6 [==============================] - 0s 4ms/step - loss: 0.7220 - accuracy: 0.9185\n",
      "Epoch 98/100\n",
      "6/6 [==============================] - 0s 3ms/step - loss: 0.7157 - accuracy: 0.9022\n",
      "Epoch 99/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7152 - accuracy: 0.9239\n",
      "Epoch 100/100\n",
      "6/6 [==============================] - 0s 2ms/step - loss: 0.7137 - accuracy: 0.9239\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x1b7841fcb20>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='accuracy',patience = 100,restore_best_weights = True)\n",
    "\n",
    "# plot_loss_tf(history)\n",
    "indices = np.random.permutation(train_data.shape[0])\n",
    "train_data = train_data[indices]\n",
    "train_labels = train_labels[indices]\n",
    "\n",
    "\n",
    "model.fit(\n",
    "    train_data, train_labels,\n",
    "    batch_size = 32,\n",
    "    epochs=100,\n",
    "    # callbacks = [early_stopping]\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "2ffaa754-94a9-43cd-af70-4c6ae4ad6acd",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2ffaa754-94a9-43cd-af70-4c6ae4ad6acd",
    "outputId": "d690bdbc-b06b-49f8-c10c-67f8a9e1ab6d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6/6 [==============================] - 0s 0s/step\n",
      "175 out of 184\n",
      "95.1086956521739 %\n"
     ]
    }
   ],
   "source": [
    "train_prediction = model.predict(train_data)\n",
    "\n",
    "train_prediction = tf.nn.softmax(train_prediction).numpy()\n",
    "count = 0;\n",
    "for i in range(train_data.shape[0]):\n",
    "    if train_labels[i] == np.argmax(train_prediction[i]):\n",
    "        count+=1;\n",
    "print(count,\"out of\",train_data.shape[0])\n",
    "print((count/train_data.shape[0])*100 , \"%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "kRgSqoRcOHu2",
   "metadata": {
    "id": "kRgSqoRcOHu2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 2ms/step\n",
      "161 out of 193\n",
      "83.41968911917098\n"
     ]
    }
   ],
   "source": [
    "test_prediction = model.predict(test_data)\n",
    "test_prediction = tf.nn.softmax(test_prediction).numpy();\n",
    "count = 0;\n",
    "for i in range(test_data.shape[0]):\n",
    "    if test_labels[i] == np.argmax(test_prediction[i]):\n",
    "        count+=1;\n",
    "print(count,\"out of\",test_data.shape[0])\n",
    "print((count/test_data.shape[0])*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c0d2596f-dc52-48e1-9e4d-04e8e635e63a",
   "metadata": {
    "id": "c0d2596f-dc52-48e1-9e4d-04e8e635e63a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 0.8342\n",
      "7/7 [==============================] - 0s 2ms/step\n",
      "Confusion Matrix:\n",
      "[[33  4  0  5  6]\n",
      " [ 2 38  0  1  2]\n",
      " [ 0  0 42  0  0]\n",
      " [ 0  0  0 20  0]\n",
      " [ 6  4  1  1 28]]\n",
      "Precision: 0.8347\n",
      "Recall: 0.8342\n",
      "F1 Score: 0.8306\n",
      "Accuracy (sklearn): 0.8342\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_accuracy = model.evaluate(test_data, test_labels, verbose=0)\n",
    "print(f\"Test Accuracy: {test_accuracy:.4f}\")\n",
    "\n",
    "# Predict the labels for the test data\n",
    "test_predictions = model.predict(test_data)\n",
    "predicted_labels = np.argmax(test_predictions, axis=1)\n",
    "\n",
    "# Calculate confusion matrix\n",
    "conf_matrix = confusion_matrix(test_labels, predicted_labels)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n",
    "\n",
    "# Calculate precision, recall, and F1 score\n",
    "precision, recall, f1_score, _ = precision_recall_fscore_support(test_labels, predicted_labels, average='weighted')\n",
    "print(f\"Precision: {precision:.4f}\")\n",
    "print(f\"Recall: {recall:.4f}\")\n",
    "print(f\"F1 Score: {f1_score:.4f}\")\n",
    "\n",
    "# Accuracy from scikit-learn (should match with model.evaluate accuracy)\n",
    "accuracy = accuracy_score(test_labels, predicted_labels)\n",
    "print(f\"Accuracy (sklearn): {accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "933233a8-4efb-461d-b9c1-10ec30c3eae0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate precision and recall for each class\n",
    "precision = dict()\n",
    "recall = dict()\n",
    "average_precision = dict()\n",
    "n_classes = 5\n",
    "\n",
    "# Compute Precision-Recall and plot curve for each class\n",
    "for i in range(n_classes):\n",
    "    precision[i], recall[i], _ = precision_recall_curve(test_labels == i, test_predictions[:, i])\n",
    "    average_precision[i] = average_precision_score(test_labels == i, test_predictions[:, i])\n",
    "\n",
    "# Plot Precision-Recall curve for each class\n",
    "plt.figure(figsize=(10, 7))\n",
    "for i in range(n_classes):\n",
    "    plt.plot(recall[i], precision[i], lw=2, label=f'Class {i} (AP = {average_precision[i]:0.2f})')\n",
    "\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.title('Precision-Recall Curve')\n",
    "plt.legend(loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17da348f-16ce-45fd-88d6-3738eb29c68e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcc940ef-97e1-4b99-9af0-aaae81e53dec",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
